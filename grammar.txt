<program> ::= <item>*

<item> ::= <attribute>* ( <func> | <type_decl> )

<func> ::= func <ident> \( <param_list> \) <type>? <block>
<param_list> ::= <param> | <param> , <param_list> | <epsilon>
<param> ::= <ident> <type>

<type_decl> ::= type <ident> = (<type> | <struct>) ;

<type> ::= <primitive> | <ident>
<primitive> ::= int | bool | \(\)

<struct> ::= struct { <field_list> }
<field_list> ::= <field> | <field> , <field_list> | <epsilon>
<field> ::= <ident> <type>

<stmt> ::= <expr_stmt> | <let>
<expr_stmt> ::= <non_block_expr> ; | <block_expr> ;?
<let> ::= let <ident> <type>? = <expr> ;

<expr> ::= <non_block_expr> | <block_expr>

<non_block_expr> ::= <constant> | <unary> | <binary> | <group> | <call> | <return> | <ident> | <struct_init>
                      | <member_access>
<constant> ::= <integer> | <boolean> | \(\)
<unary> ::= <unary_op> <expr>
<unary_op> ::= ! | -
<binary> ::= <expr> <binary_op> <expr>
<binary_op> ::= + | - | && | \|\| | = | == | != | < | <= | > | >=
<group> ::= \( <expr> \)
<call> ::= <expr> \( <arg_list> \)
<arg_list> ::= <expr> | <expr> , <arg_list> | <epsilon>
<return> ::= return <expr>?

<struct_init> ::= <ident> { <field_init_list> }
<field_init_list> ::= <field_init> | <field_init> , <field_init_list> | <epsilon>
<field_init> ::= <ident> : <expr>

<member_access> ::= <expr> . <ident>

<block_expr> ::= <block> | <if> | <loop>
<block> ::= { <stmt>* <expr>? }
<if> ::= if <expr> <block> <else>?
<else> ::= else <block>
<loop> ::= loop <block>

<ident> ::= (a..z | A..Z | _) (a..z | A..Z | _ | 0..9)*
<integer> ::= (0..9)+
<boolean> ::= true | false
